### G3 

## 3 x 6 + 2h 

### praca domowa.01 do 12 listopada 2023 23:59

-----------------------------------------------------------------------------

### Dla chętnych: 
- stworzyć swoje konto w serwisie GitHub
- stworzyć repozytorium 'R-w-statystyce-opisowej'
- umieścić wszystkie trzy prace domowe (jako scrypty R)
- wypełnić plik README.md
- przysłać link do prowadzącego (+1 pkt)
WAŻNE: prace domowe należy i tak umieścić w e-lei

-----------------------------------------------------------------------------

W ten weekend:
- niedziela: 6 h (2 x 3h)

-----------------------------------------------------------------------------

# Warunki zaliczenia
# - odrabianie prac domowych 
# - obecność na zajęciach

-----------------------------------------------------------------------------

Sylabus (20 h):
- Podstawy R
- Wczytywanie danych i wstępna eksploracja
- Brak danych i czyszczenia danych
- Poodstawowe przekształcenia i agregacje danych (pakiety dplyr i tidyr)
- Analiza struktury
- Regresja i korelacje
- Regresja wielokrotna
- Szeregi czasowe
- Sezonowość

-----------------------------------------------------------------------------


# Literatura:

"the net is vast and infinite"

tzw. Cheat Sheety
https://www.i3s.unice.fr/~malapert/R/pdf/base-r.pdf                                                                                          ## ważne

Mirosław Sobczyk, Statystyka Opisowa, C.H. Beck, Warszawa, 2010

Przemysław Biecek, Przewodnik po pakiecie R, Oficyna Wydawnicza GiS, Wrocław, 2017

Marek Walesiak, Statystyczna analiza danych z wykorzystaniem programu R, PWN, Warszawa 2012

# Notepad++

-----------------------------------------------------------------------------

# Czemu R? Przykłady

-----------------------------------------------------------------------------

### Podstawowe informacje o języku R

	• R jest zaawansowanym pakietem statystycznym jak również językiem programowania istniejącym na platformy Windows, Unix oraz MacOS.

	• R jest wolnym (otwartym i darmowym) środowiskiem. Objęty jest licencją GNU GPL (ang. General Public License), która zezwala na wykorzystanie R także w zastosowaniach komercyjnych.

	• Język R jest językiem interpretowanym, a nie kompilowanym. Z tego względu program w nim
	napisany nie będzie tak szybki jak np. program napisany w C++. Można jednak wykorzystać
	funkcje z bibliotek napisanych np. w C, C++ czy Fortran. Można również używać funkcji R w
	Javie czy C++, ale również w Visual Basic for Statistica. Dokładny opis metod wykorzystania
	bibliotek znajduje się w pliku R-exts.pdf.
	https://cran.r-project.org/doc/manuals/r-release/R-exts.pdf

	• R jest przeznaczony raczej do pisania „małych” programów, w których ważne jest sedno a nie
	„otoczka”. Skupiamy się tutaj raczej na samych obliczeniach. Użytkownikiem naszych aplikacji
	jest najczęściej bowiem ściśle określony specjalista. Jednak program R może być wykorzystany w
	różnych zastosowaniach, np. można w nim pisać aplikacje webowe wykorzystując pakiet shiny.

	• Pakiet umożliwia również tworzenie zaawansowanych wykresów.

	• O sile R stanowi ponad 14000 bibliotek (pakietów), przeznaczonych do najróżniejszych zastosowań.

	• Całość wzbogacona jest kompleksową dokumentacją.

	• Dodatkowo bardzo użyteczną cechą R jest dostępność zbiorów danych praktycznie do każdego zagadnienia.

RStudio

	Okno RStudio składa się z czterech głównych części:
	• edytora kodu źródłowego otwartych plików/skryptów i podglądu własności obiektów (okienko po lewej u góry),
	• konsoli R i terminalu (okienko po lewej u doły),
	• listy zadeklarowanych obiektów i historii poleceń (okienko po prawej u góry),
	• prostego menadżera plików, podglądu rysunków, wykazu dostępnych pakietów R i przeglądarki
	dokumentacji (okienko po prawej u dołu).

	Skróty klawiszowe w RStudio:
	• CTRL + SHIFT + n - tworzy nowy plik źródłowy
	• CTRL + ENTER - przekazuje kod z edytora do konsoli R
	• CTRL + 1 i CTRL + 2 - przenoszą karetkę między edytorem a konsolą
	• CTRL + F11 i CTRL + F12 (CTRL + PGUP i CTRL + PGDN) - przenoszą karetkę między otwartymi skryptami
	• CTRL + L - czyści konsolę
	• CTRL + SHIFT + F10 - usuwa wszystkie obiekty
	• # - komentarz

	Zadanie.01. 
		Otwórz program RStudio. Utwórz nowy skrypt i zapisz go np. jako: MojeZadania.R.
		W tym skrypcie możesz zapisywać rozwiązania kolejnych zadań. 

System pomocy

	• ? lub help() - pomoc dla danej funkcji

	?mean
	help(mean)

	?sd
	help(sd)

	?moments::skewness
	help(moments::skewness)
	
	?moments::kurtosis
	help(moments::kurtosis)

	Pliki pomocy zazwyczaj zawierają następujące elementy:
		• Description - ogólny opis obiektu zawierający informacje do czego służy dana funkcja.
		• Usage - sposób użycia zawierający przynajmniej listę argumentów funkcji i ich wartości domyślnych.
		• Arguments - szczegółowy opis wcześniej wymienionych argumentów.
		• Details - szczegółowe informacje o funkcji takie jak sytuacje w jakich można użyć danej funkcji, szczegóły techniczne, itd.
		• Value - opis obiektu i wartości zwracanych przez funkcję.
		• References - bibliografia zwierająca pozycje, w których można znaleźć opis używanych procedur.
		• See Also - odnośniki do funkcji o podobnym działaniu.
		• Examples - przykłady użycia funkcji do samodzielnego przeanalizowania i uruchomienia.	


Pakiety

	Pakiet to zestaw narzędzi, takich jak nowe funkcje wraz z dokumentacją oraz nowe zbiory danych,
	rozszerzających funkcjonalność programu R. Większość z nich znajduje się w repozytorium CRAN
	(Comprehensive R Archive Network).
	• install.packages("nazwa pakietu") - instalacja pakietu
	• library(nazwa pakietu) lub require(nazwa pakietu) - ładowanie pakietu
	• help(package = "nazwa pakietu") - pomoc na temat pakietu

	Zadanie.02. Zainstalujcie i uruchokmcie paczkę "moments", skorzystajcie z pomocy dla podanych niżej poleceń

  install.packages("moments")
	library(moments)
	require(moments)
	help(package = "moments")

Wybrane typy danych w RStudio

	Typy danych w R można sklasyfikować następująco:
		1. typy podstawowe
		• typy atomowe (ang. atomic):
			– wektor wartości logicznych (typ logical) TRUE, FALSE
			– wektor wartości całkowitych (typ integer)
			– wektor wartości rzeczywistych (typ double)
			– wektor napisów (typ character)
		• typy o strukturze rekurencyjnej (ang. recursive):
			– lista (wektor uogólniony; typ list)
			– funkcja (typ closure lub function)
		2. typy złożone (ang. compound types), które są reprezentowane przy pomocy obiektów typów
		podstawowych, m.in.:
		• macierz i tablica (klasa matrix i array)
		• ramka danych (klasa data.frame), tibble	

	Link: "https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures.html"
                 	
Wektory logiczne

	• W R zdefiniowane są dwie stałe logiczne: TRUE - prawda, FALSE - fałsz.
	FALSE

	# • W programie R wielkość liter ma znaczenie (ang. case-sensitive). Zatem przykładowo TRUE nie
	# jest tym samym co true.
	# true
	
	c(TRUE, TRUE, FALSE, FALSE, TRUE)
	c(c(TRUE, TRUE, FALSE), c(FALSE, TRUE))

	• Długość wektora zwraca funkcja length().
	length(c(TRUE, TRUE, FALSE, FALSE, TRUE))
	
Wektory liczbowe

	• Wektory liczbowe (numeric) możemy podzielić na następujące typy (od najmniej do najbardziej ogólnego):
	– całkowite (integer)
	– rzeczywiste (double)
	
	1
	
	c(1, +2, -3, 2.3, -.4, 5.)

	rep(c(1, 2), 3)

	2e-3 # notacja naukowa 2 * 10^(-3)

	2e3 # 2 * 10^3

	• Do generowania ciągów arytmetycznych w R służą operator : (różnica równa się 1 lub −1) i
	funkcja seq() (od ang. sequence, dowolne różnice).

	c(-3:2, 4:0)

	2.2:6.4

	
                 
	1:8rep
	seq(1, 8)
	seq(1, 8, 1)

	seq(1, 8, 2)
	seq(1, 8, by = 2)
	
	seq(1, 8, length.out = 6)

	Zadanie.02. Użyj funkcji rep(), aby utworzyć wektor logiczny, zaczynając od trzech wartości prawda,
	następnie czterech wartości fałsz, po których następują dwie wartości prawda i wreszcie pięć wartości
	fałsz.
	## [1] TRUE TRUE TRUE FALSE FALSE FALSE FALSE TRUE TRUE FALSE FALSE FALSE
	## [13] FALSE FALSE

c(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)                 
                                   
c(rep.int(TRUE,3), rep.int(FALSE,4), rep.int(TRUE,2), rep.int(FALSE,5))

c(rep(TRUE, 3), rep(FALSE, 4), rep(TRUE, 2), rep(FALSE, 5))      
                 
 		c(
		  rep(TRUE, 3),
		  rep(FALSE, 4),
		  rep(TRUE, 2),
		  rep(FALSE, 5)
		  )               

rep(c(TRUE, FALSE, TRUE, FALSE), c(3, 4, 2, 5))
                 
	Zadanie.03. Palindromem nazywamy wektor, którego elementy czytane od końca tworzą ten sam
	wektor co elementy czytane od początku. Utwórz taki wektor 100 liczb przy czym pierwsze 20 liczb
	to kolejne liczby naturalne, następnie występuje 10 zer, następnie 20 kolejnych liczb parzystych, a
	pozostałe elementy określone są przez palindromiczność (warunek symetrii).

  ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 0 0 0 0 0
  ## [26] 0 0 0 0 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40
  ## [51] 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2 0 0 0 0 0                 
  ## [76] 0 0 0 0 0 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1

 c(seq(1,20), rep(0,10), seq(2, 40, 2), seq(40, 2, -2), rep(0,10), seq(20,1))

               
c(
  seq(1,20),
  rep(c(0),10),
  seq(2,40,2),
  seq(40,2,-2),
  rep(c(0),10),
  seq(20,1)
  )

	 c(
	  seq(1:20),
	  rep(0, 10),
	  seq(2, 40, 2),
	  rep(0, 10),
	  seq(40, 2, -2),
	  rep(0, 10),
	  seq(20,1,-1)
		)
                 
 ### rev
                 
	c(
	  seq(1:20),
	  rep(0, 10),
	  seq(2, 40, 2),
	  rep(0, 10),
	  rev(seq(2, 40, 2)),
	  rep(0, 10),
	  rev(seq(1:20))
	)

	a = c(seq(1:20))
	b = c(rep(0,10))
	c = c(seq(2, 40, 2))
	                 
 	c(a, b, c, b, rev(c), b, rev(a))               
                
                 
sessionInfo() # jak sprawdzić jakie paczki są załadowane?
installed.packages()

                                  
attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods  
[7] base     

other attached packages:
[1] moments_0.14.1                
                 
                 
                 
Wektory napisów

	• Ciągi dowolnych znaków drukowanych, zwane napisami, tworzymy wykorzystując 
    apostrofy '' lub cudzysłów " ".

	"statystyka"
	length("statystyka")
  nchar("statystyka")
	
	c("statystyka", "matematyka", ",", "informatyka", "!")
	length(c("statystyka", "matematyka", ",", "informatyka", "!"))

Operatory przypisania

	• W R obiekty nazywamy za pomocą jednego z następujących operatorów przypisania 
    (ang. assignment operator): =, <-, ->.
	• W RStudio skrót klawiszowy ALT+- wywołuje <-

	x = 5
	5 = x # błąd!
	
	# Alt i minus
	y <- 6 # najczęściej wykorzystywane przypisanie
	6 -> y
	
	x 
	y

	Zadanie.02(cd.). Nazwij dany wektor przez x, a następnie korzystając z tej nazwy dokonaj konwersji na wektor numeryczny. Użyj funkcji as.numeric().
                 
x = c(rep.int(TRUE,3), rep.int(FALSE,4), rep.int(TRUE,2), rep.int(FALSE,5))
as.numeric(x) 
                 
x= c(
  rep(c(TRUE),3),
  rep(c(FALSE),4),
  rep(c(TRUE),2),
  rep(c(FALSE),5)
)

as.numeric(x)                 

	x <- as.numeric(rep(c(TRUE, FALSE, TRUE, FALSE), c(3, 4, 2, 5)))
                 
	5 %% 2 # modulo (a mod d = r) oznacza,iż r jest resztą z dzielenia a przed d
	5 %/% 2 # dzielenie całkowitoliczbowe (integer division)
	?"%%"
	?"%/%"

Operatory arytmetyczne

	• Do działania na wektorach liczbowych można używać następujących binarnych operatorów arytmetycznych:
	– + (dodawanie),
	– - (odejmowanie),
	– * (mnożenie),
	– / (dzielenie rzeczywiste),
	– ^ (potęgowanie),
	– %% (reszta z dzielenie (modulo)),
	– %/% (dzielenie całkowite (bez reszty)).

	• Operatory arytmetyczne są zwektoryzowane (ang. vectorized), tzn. dla wektorów

	x = (𝑥1, 𝑥2, … , 𝑥𝑛) oraz y = (𝑦1, 𝑦2	, … , 𝑦𝑛	) o tej samej długości 𝑛 w wyniku działania
		
		x♢y uzyskujemy wektor w = (𝑥1♢𝑦1, 𝑥2♢𝑦2, … , 𝑥𝑛♢𝑦𝑛).

                 
	Czyli operacje tego typu wykonywane są element po elemencie (ang. elementwise).
	• Unikamy w tej sposób „jawnej„ pętli (pętla jest „ukryta„ w kodzie operatora), co może pozwolić
	na przyśpieszenie obliczeń.

	1:3 + c(3, 4, 5)
	1:3 * 11:13 / 21:23

	W przypadku, gdy wektory będące argumentami operatorów binarnych są różnej długości, stosowana jest tak zwana 
	reguła zawijania (ang. recycling rule). Powiela ona niejako krótszy wektor tak, aby uzgodnić jego długość 
	dłuższym wektorem. Niech x = (𝑥1	, 𝑥2	, … , 𝑥𝑛) oraz y = (𝑦1, 𝑦2, … , 𝑦𝑚),
	gdzie bez straty ogólności 𝑚 ⩾ 𝑛. Wtedy wynikiem działania jest 𝑚-elementowy wektor postaci
	(dla odpowiedniego 𝑙) x♢y = (𝑥1♢𝑦1, … , 𝑥𝑛♢𝑦𝑛, 𝑥1♢𝑦𝑛+1, 𝑥2♢𝑦𝑛+2, … , 𝑥𝑙♢𝑦𝑚).
? !
	x <- c(1, 3, 5, 8, 1, 3, 0, 
         6)
	x * c(1, 3)

	x <- c(1, 3, 5, 8, 1, 3, 0)
	x * c(1, 3) # błąd!
 
Operatory logiczne

	• Argumentami operacji logicznych są zasadniczo wektory wartości logicznych, a w wyniku otrzymujemy także wektor wartości logicznych. 
	• Rozważamy następujące operatory i funkcje logiczne:
		– !x (negacja),
		– x | y (alternatywa), (OR)
		– x & y (koniunkcja). (AND)
	• Tak jak operatory arytmetyczne, operatory logiczne są zwektoryzowane i podlegają regule zawijania.

	 x1 <- c(TRUE,FALSE,TRUE,FALSE)
	 x2 <- c(FALSE,TRUE,FALSE,TRUE)
	 
	 !x1
	 !x2
	 x1&x2
	 x1|x2 
   xor(x1, x2)                 
  
	isTRUE(FALSE)
 isFALSE(FALSE)
                 
 
   x <- c(FALSE, TRUE)
   names(x) <- as.character(x)
   outer(x, x, "&") ## AND table
   outer(x, x, "|") ## OR  table
   outer(x, x, xor) ## XAND  table
                 
                 
Operatory relacyjne

	• Do porównywania wektorów służą następujące operatory relacyjne:
		– x < y (czy mniejsze?),
		– x > y (czy większe?),
		– x <= y (czy nie większy?),
		– x >= y (czy nie mniejszy?),
		– x == y (czy równy?),
		– x != y (czy nierówny?).
	• Można je stosować na wektorach dowolnych typów. Jednak wynikiem ich działania jest zawsze
	wektor logiczny.

  1 > 0
  0 == 1
  
  (1:7) == (1:7)
  (1:7) == (7:1)
	a <- ((1:7) == (7:1))

	• Przy porównaniu wektorów napisów, operator == sprawdza, czy poszczególne napisy są takiej
	samej długości i czy składają się dokładnie z tych samych znaków (wielkości liter mają znaczenie).

	"Statystyka" == "statystyka"
	"statystyka" == "statystyka"
	tolower("Statystyka") == tolower("statystyka")

Indeksowanie wektorów

	• Wartości elementów każdego wektora leżą na ściśle określonych pozycjach oznaczonych kolejnymi liczbami naturalnymi (1:length(x)). Do elementów wektora odwołujemy się poprzez nawiasy kwadratowe [].
	• Jeżeli w nawiasach kwadratowych podanych po nazwie wektora znajdzie się wektor wartości dodatnich, to otrzymamy wektor złożony z elementów leżących na podanych pozycjach.

	
Indeksowanie wektorów

	• Wartości elementów każdego wektora leżą na ściśle określonych pozycjach oznaczonych kolejnymi liczbami naturalnymi (1:length(x)). Do elementów wektora odwołujemy się poprzez nawiasy kwadratowe [].
	• Jeżeli w nawiasach kwadratowych podanych po nazwie wektora znajdzie się wektor wartości dodatnich, to otrzymamy wektor złożony z elementów leżących na podanych pozycjach.

	x <- 1:5
	x[2]	
  x <- c(2, 6, 3, 5, 8)
  x[2]
  
  x <- c(2, 6, 3, 5, 8)
  typeof(x[2])
  typeof(x[2:3])
	x[length(x)] # ostatni element wektora
	is.vector(x[2:4])
  class(x)

	• Jeżeli w nawiasach kwadratowych podanych po nazwie wektora znajdzie się wektor wartości
	ujemnych, to otrzymamy wektor złożony z elementów tego wektora prócz zadanych.

	x[-2]
  x[c(1,3,5)]
	x[-(2:4)]
	x[c(1, -2)] # błędny zapis


 Jeżeli w nawiasach kwadratowych podanych po nazwie wektora znajdzie się wektor wartości logicznych, 
  to otrzymamy wektor złożony z elementów tego wektora, które znajdują się na pozycjach, na których odpowiadający im indeksator ma wartość TRUE.                 

  x[c(TRUE, FALSE, TRUE, FALSE, TRUE)]
  x[x < 4]                 

• Nawiasów kwadratowych możemy również użyć do zmiany elementów danego wektora.

  x[2] <- 1
  x
  x[c(1, 4)] <- c(-2,-5)
  x[c(1, 4)] <- 7


Zadanie.04. Z wektora letters wybierz litery na pozycjach 5, 10, 15, 20, 25.                 
                 
letters[c(5, 10, 15, 20, 25)]

letters[c(seq(5,25,5))]

                 
	Zadanie.05. Utwórz wektor liczb naturalnych od 1 do 1000, a następnie zamień liczby parzyste na ich
	odwrotności.
          
   # wygenerowanie wektora
   # identyfikacja liczb parzystych [operator modulo x%%?]
   # zastąpienie zidentyfikowanych liczb ich odwrotnością
                 
   	x <- c(1:1000)
    
		### Wersja 1                 
    x[x%%2 == 0] <- 1/x[x%%2 == 0]                 
                 
		### Wersja 2
    i <- c(seq(0,1000,2))                             
    x[i] <- 1/x[i]          

    
	x
	print(x)
	head(x)
	tail(x)
	
	round(x,2)
	head(round(x,2))
	tail(round(x,2))

	options(scipen = 999) # wyłącz zapis anuakowy
  x
  options(scipen = 0)               
  x
                 
  format(x, scientific = FALSE) # ustaiwnie ręczne
                 
Wybrane funkcje wbudowane

	Program R zawiera wiele zwektoryzowanych funkcji matematycznych dla wektorów liczbowych
	lub czasem zespolonych. W wyniku ich działania uzyskujemy wektor tej samej długości co
	wektor wejściowy, którego wartości są wyznaczane przez przekształcenie każdego elementu daną
	funkcją.
		– abs() - wartość bezwzględna,
		– sign() - znak liczby,
		– floor() - funkcja „podłoga’ ’,
		– ceiling() - funkcja „sufit’ ’,
		– trunc() - obcięcie części ułamkowej liczby (⌊𝑥⌋ dla 𝑥 ⩾ 0, ⌈𝑥⌉ dla 𝑥 < 0),
		– round(x, digits = 0) - zaokrąglenie x do digits miejsc po kropce dziesiętnej,
		– sqrt() - pierwiastek kwadratowy,
		– exp() - funkcja wykładnicza,
		– log(x, base = exp(1)) - logarytm o podstawie base,
		– gamma() - funkcja gamma,
		– beta(a, y) - funkcja beta,
		– choose(n, k) - współczynnik dwumianowy,
		– sin(), cos(), tan() - funkcje trygonometryczne,
		– asin(), acos(), atan() - funkcje cyklometryczne.

	abs(-2:2)
	mean(1:5)
	median(1:5)
	
	sign(-10)
	sign(-2.5)
	sign(2.5)
	sign(0)
	
	floor(2.5)
	ceiling(2.5)

  • Funkcja sort() zwraca uporządkowaną kopię danego wektora. Funkcja is.unsorted() 
	  służy	do sprawdzania, czy dany wektor nie jest posortowany niemalejąco.	
	
    is.numeric()
    is.unsorted()                 
    is.double()
    as.numeric()
    as.string()             
    typeof()
                 
	sort(c(1, 2, 3, 4, 3, 2, 1))
                 
  sort(c(1, 2, 3, 4, 3, 2, 1), decreasing = TRUE)                 

    # Czy wektor nie jest posortowany?
	
    is.unsorted(c(1, 2, 3, 4, 3, 2, 1)) # TRUE - nie jest posortowany
    is.unsorted(sort(c(1, 2, 3, 4, 3, 2, 1))) # FALSE - wektor jest posortowany

    # Czy wektor jest posortowany?
    
    !is.unsorted(c(1, 2, 3, 4, 3, 2, 1))
    !is.unsorted(sort(c(1, 2, 3, 4, 3, 2, 1)))                 
 
  • Funkcja rev() zwraca wektor o elementach podanych w odwrotnej kolejności.
	
	  rev(c(6, 2, 2, 3, 2, 3))
	
	• Funkcja unique() służy do usuwania powtórzeń wartości elementów wektora.

  	x <- c(2, 3, 2, 2)
  	unique(x)

    length(unique(c(6, 2, 2, 3, 2, 3))) # liczba unikalnych elementów wektora
 
  x <- c(-1.876, -1.123, -0.123, 0, 0.123, 1.123, 1.876)

  	is.numeric(x)
  	!is.unsorted(x)                 
  	is.double(x)
  	typeof(x)
	
    sign(x)
    
    round(x, 2)
    
    floor(x)
    ceiling(x)        
    
    trunc(x) # ucięcie części dziesiętnej
	
    Sys.Date()
    Sys.time()
                
###  Zadanie.07. Wyznacz pierwiastek kwadratowy z każdej liczby naturalnej od 1 do 100 milionów.
    Przygotuj na dwa sposoby: użyj funkcji wbudowanej sqrt, użyj funkcji użytkownika ^(1/2)         
    Zmierzcie czas działania w obu wariantach. Jakie macie spostrzeżenia i wnioski?             

#1
c = Sys.time()
x <- sqrt(c(1:100000000))
d = Sys.time()

e = d - c
print(e)

#2
f = Sys.time()
x <- (c(1:100000000))^(1/2)
g = Sys.time()

h = g - f
print(h)
                 
                 
                 

                 	
		start_time <- Sys.time()
		  invisible(sqrt(1:1e8)) # nie wysyła wyników na konsolę
		end_time <- Sys.time()	
		
      end_time - start_time # sprawdź czas
                
		start_time <- Sys.time()	
			invisible((1:1e8)^0.5) # nie wysyła wyników na konsolę
		end_time <- Sys.time()	

      end_time - start_time # sprawdź czas
                 

Zadanie.08. W pakiecie schoolmath znajduje się zbiór danych primlist, który zawiera liczby pierwsze pomiędzy 1 a 9999999.
    • Znajdź największą liczbę pierwszą mniejszą od 1000.
    • Ile jest liczb pierwszych większych od 100 a mniejszych od 500?  
                 
x <- primlist[primlist< 1000]
tail(x,1)

install.packages('schoolmath') 
library(schoolmath) 
data("primlist")
                 
  max(primlist[primlist<1000]) 

  length(primlist[primlist>100 & primlist<500]) 
                 
Listy

	• Kolejnym podstawowym typem danych jest lista. Najlepiej postrzegać ją jako ciąg złożony z elementów o dowolnych typach 
    (a więc już niekoniecznie tych samych jak w przypadku wektorów atomowych).
	• Listy mają kluczowe znaczenie w programie R. Przykładowo, funkcje w R mają możliwość zwracania wielu wartości różnych typów. 
    Wynikiem działania funkcji może być tylko jeden obiekt, ale nic nie stoi na przeszkodzie, aby zebrać obliczone, różnorodne dane w pojedynczą listę. 
    Co więcej, wiele dość skomplikowanych na pierwszy rzut oka obiektów będzie w swej stocie reprezentantami list, np. ramki danych.
	• List tworzymy zazwyczaj za pomocą funkcji list().

	x <- list(TRUE, 2L, 3.5, "statystyka")
	x
        typeof(x) 
	      length(x)
        str(x)

	• Funkcja str() podaje bardziej zwięzłą i jednocześnie bardziej szczegółową informację o liście
	str(x)

	• Przypomnijmy, że nawiasy kwadratowe [] zastosowane do wektorów atomowych zwracały obiekt tego samego typu co obiekt, do którego go stosujemy. Podobnie jest dla list.

	x <- list(TRUE, 2L, 3.5, "statystyka")
	x[1]
  x[2]
  x[3]
  x[4] 
	x[c(1:2)]
  x[-c(2:4)]

	• Konkretny element listy wydobywamy za pomocą [[]]. Jako argument przyjmuje on wartość liczbową dodatnią określającą indeks interesującego nas elementu.

	x <- list(1:4, c("a", "b", "c"), list("statystyka", "informatyka"))
	length(x)
	str(x)
	
	x[[1]]
	
	x[[1]][1]
	x[[1]][2:3]
	
	x[[2]][1]
	
	x[[2]]
	x[[3]]
  x[[3]][[1]]
	x[[3]][[2]]	               
                 
	•  Do modyfikowania zawartości list możemy wykorzystać zarówno [] jak i [[]]. Ich działanie różni się w wielu przypadkach.
	
	x <- list(1, 2)
	str(x)

• Nawiasy [] umożliwiają zastąpienie zawartości wybranej podlisty. Do wybranej podlisty możemy przypisać wektor (uogólniony lub atomowy).
	
	x <- list(1, 2, 3)
	str(x)

	# znulowanie elementu z listy (bez zmiany długości listy)
	x[1] <- list(NULL)
	str(x)

	• Niewiele funkcji jest dedykowanych listom. Wynika to faktu, że ten typ danych służy zazwyczaj do grupowania innych obiektów w jeden. Listy są jednak istotnymi elementami programu R, ponieważ są to obiekty, na których zbudowane są inne typy danych jak np. ramki danych.
	• Funkcja lapply() służy do wywoływania danej funkcji na każdym elemencie listy. Liście 𝑘 elementowej przypisana jest lista 𝑘 elementowa.
	
	lapply(list(1:3, 4:6), sum)

Zadanie 9. Skonstruuj listę o nazwie moja_lista, której pierwszym elementem będzie dwuelementowy wektor napisów zawierający Twoje imię i nazwisko, 
          drugim elementem będzie liczba 𝜋, trzecim funkcja służąca do obliczania pierwiastka kwadratowego, 
          a ostatni element listy to wektor złożony z liczb 0,02; 0,04; … ; 1. 
         
          Następnie usuń elementy numer jeden i trzy z tej listy. 

          Na zakończenie, wyznacz listę zawierającą wartości funkcji gamma Eulera dla elementów listy moja_lista.                 
                       
                 
                                  
                 
                 
                 
